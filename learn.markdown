## 单机并发缓存
<img src="./zhotos/localcache.png" width="80%">

如果缓存不存在，应从数据源（文件，数据库等）获取数据并添加到缓存中。GeeCache 是否应该支持多种数据源的配置呢？不应该
一是数据源的种类太多，没办法一一实现；
二是扩展性不好。如何从源头获取数据，应该是用户决定的事情，我们就把这件事交给用户好了。
因此，我们设计了一个回调函数(callback)，在缓存不存在时，调用这个函数，得到源数据。

## 一致性哈希
本项目实现的似乎是，不同节点存储不同的缓存
根据访问的key，经过一致性哈希选定要访问的节点
### prerequisite
分布式系统中，每个节点存储的数据是不同的。
不能通过加中间层 负载均衡层 实现加权轮询
<img src="./zhotos/consisthash1.png" width="40%">
在一致哈希算法中，如果增加或者移除一个节点，仅影响该节点在哈希环上顺时针相邻的后继节点，其它数据也不会受到影响。
<img src="./zhotos/consisthash2.png" width="40%">
解决数据倾斜问题：
不再将真实节点映射到哈希环上，而是将虚拟节点映射到哈希环上，并将虚拟节点映射到实际节点，所以这里有「两层」映射关系
<img src="./zhotos/consisthash3.png" width="40%">
